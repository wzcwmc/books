package com.dao.impl;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.dao.ReaderDao;
import com.entity.Reader;
import com.utils.DBUtils;

public class ReaderDaoImpl implements ReaderDao {

	DBUtils dbutils = new DBUtils();
	private Connection conn = null;
	private PreparedStatement pst = null;
	private ResultSet rs = null;
	
	@Override
	public List<Reader> getReaders() {
	
		String sql=" select reaid, loginid, loginpwd, reaname, gender, birthday,"
				+ " address, phone from reader ";
		return getReaderBySql(sql);
	}

	@Override
	public Reader getReaderByLoginId(String LoginId) {
		List<Reader> list = null;
		StringBuilder sql = new StringBuilder();
		sql.append(" select reaid, loginid, loginpwd, reaname, gender, birthday, ");
		sql.append(" address, phone from reader where loginid = ? ");
		list = getReaderBySql(sql.toString(), LoginId);
		if (list.size()>0) {
			return list.get(0);
		}
		return null;
	}

	private List<Reader> getReaderBySql(String sql, Object... obj) {
		List<Reader> list = new ArrayList<Reader>();
		Reader reader = null;
		conn = dbutils.getConn();
		try {
			pst = conn.prepareStatement(sql);
			for (int i = 0; i < obj.length; i++) {
				pst.setObject(i + 1, obj[i]);
			}
			rs = pst.executeQuery();
			// System.out.println();
			while (rs.next()) {
				reader = new Reader();
				reader.setReaId(rs.getInt("reaid"));
				reader.setLoginId(rs.getString("loginid"));
				reader.setLoginPwd(rs.getString("loginpwd"));
				reader.setReaName(rs.getString("reaname"));
				reader.setGender(rs.getString("gender"));
				reader.setBirthday(Date.valueOf(rs.getString("birthday")));
				reader.setAddress(rs.getString("address"));
				reader.setPhone(rs.getString("phone"));
				list.add(reader);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			dbutils.closeAll(rs, pst, conn);
		}
		return list;
	}
}
